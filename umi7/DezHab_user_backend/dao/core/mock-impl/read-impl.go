// Code generated by MockGen. DO NOT EDIT.
// Source: read.go

// Package mock_impl is a generated GoMock package.
package mock_impl

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// First mocks base method.
func (m *MockReader) First(out, filter interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First", out, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockReaderMockRecorder) First(out, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockReader)(nil).First), out, filter)
}

// Last mocks base method.
func (m *MockReader) Last(out, filter interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last", out, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Last indicates an expected call of Last.
func (mr *MockReaderMockRecorder) Last(out, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockReader)(nil).Last), out, filter)
}

// Where mocks base method.
func (m *MockReader) Where(out interface{}, query string, params ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{out, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Where indicates an expected call of Where.
func (mr *MockReaderMockRecorder) Where(out, query interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{out, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockReader)(nil).Where), varargs...)
}

// Find mocks base method.
func (m *MockReader) Find(out, filter, exclude interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", out, filter, exclude)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockReaderMockRecorder) Find(out, filter, exclude interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockReader)(nil).Find), out, filter, exclude)
}

// FetchPaginated mocks base method.
func (m *MockReader) FetchPaginated(out, filter, exclude interface{}, limit, offset int, order string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPaginated", out, filter, exclude, limit, offset, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchPaginated indicates an expected call of FetchPaginated.
func (mr *MockReaderMockRecorder) FetchPaginated(out, filter, exclude, limit, offset, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPaginated", reflect.TypeOf((*MockReader)(nil).FetchPaginated), out, filter, exclude, limit, offset, order)
}

// Count mocks base method.
func (m *MockReader) Count(out, count, filter, exclude interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", out, count, filter, exclude)
	ret0, _ := ret[0].(error)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockReaderMockRecorder) Count(out, count, filter, exclude interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockReader)(nil).Count), out, count, filter, exclude)
}
