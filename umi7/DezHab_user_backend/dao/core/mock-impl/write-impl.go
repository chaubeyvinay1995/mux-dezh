// Code generated by MockGen. DO NOT EDIT.
// Source: write.go

// Package mock_impl is a generated GoMock package.
package mock_impl

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWriter) Create(object interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", object)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockWriterMockRecorder) Create(object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWriter)(nil).Create), object)
}

// Update mocks base method.
func (m *MockWriter) Update(object interface{}, filters ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{object}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWriterMockRecorder) Update(object interface{}, filters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{object}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWriter)(nil).Update), varargs...)
}

// Ping mocks base method.
func (m *MockWriter) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockWriterMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockWriter)(nil).Ping))
}

// Upsert mocks base method.
func (m *MockWriter) Upsert(uniqueConstraint, updateColumn, updateValue string, objects []interface{}, chunkSize int, excludeColumns ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{uniqueConstraint, updateColumn, updateValue, objects, chunkSize}
	for _, a := range excludeColumns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Upsert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockWriterMockRecorder) Upsert(uniqueConstraint, updateColumn, updateValue, objects, chunkSize interface{}, excludeColumns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{uniqueConstraint, updateColumn, updateValue, objects, chunkSize}, excludeColumns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockWriter)(nil).Upsert), varargs...)
}

// Delete mocks base method.
func (m *MockWriter) Delete(object interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", object)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWriterMockRecorder) Delete(object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWriter)(nil).Delete), object)
}
