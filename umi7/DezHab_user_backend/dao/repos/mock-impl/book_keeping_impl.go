// Code generated by MockGen. DO NOT EDIT.
// Source: book_keeping.go

// Package mock_impl is a generated GoMock package.
package mock_impl

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/umi7/DezHab_user_backend/dao/models"
	reflect "reflect"
)

// MockBookKeeping is a mock of BookKeeping interface.
type MockBookKeeping struct {
	ctrl     *gomock.Controller
	recorder *MockBookKeepingMockRecorder
}

// MockBookKeepingMockRecorder is the mock recorder for MockBookKeeping.
type MockBookKeepingMockRecorder struct {
	mock *MockBookKeeping
}

// NewMockBookKeeping creates a new mock instance.
func NewMockBookKeeping(ctrl *gomock.Controller) *MockBookKeeping {
	mock := &MockBookKeeping{ctrl: ctrl}
	mock.recorder = &MockBookKeepingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookKeeping) EXPECT() *MockBookKeepingMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookKeeping) Create(arg0 context.Context, arg1 models.BookKeeping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBookKeepingMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookKeeping)(nil).Create), arg0, arg1)
}

// Update mocks base method.
func (m *MockBookKeeping) Update(arg0 context.Context, arg1 models.BookKeeping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBookKeepingMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookKeeping)(nil).Update), arg0, arg1)
}

// Search mocks base method.
func (m *MockBookKeeping) Search(arg0 context.Context, arg1 string) (models.BookKeeping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(models.BookKeeping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockBookKeepingMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockBookKeeping)(nil).Search), arg0, arg1)
}

// FetchPaginated mocks base method.
func (m *MockBookKeeping) FetchPaginated(arg0 context.Context, arg1 string, arg2, arg3 int, arg4 string) ([]models.BookKeeping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPaginated", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]models.BookKeeping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPaginated indicates an expected call of FetchPaginated.
func (mr *MockBookKeepingMockRecorder) FetchPaginated(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPaginated", reflect.TypeOf((*MockBookKeeping)(nil).FetchPaginated), arg0, arg1, arg2, arg3, arg4)
}

// Count mocks base method.
func (m *MockBookKeeping) Count(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockBookKeepingMockRecorder) Count(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockBookKeeping)(nil).Count), arg0, arg1)
}
