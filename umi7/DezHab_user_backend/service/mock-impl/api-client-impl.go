// Code generated by MockGen. DO NOT EDIT.
// Source: api-client.go

// Package mock_impl is a generated GoMock package.
package mock_impl

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/umi7/DezHab_user_backend/dao/models"
	dto "gitlab.com/umi7/DezHab_user_backend/dto"
	reflect "reflect"
)

// MockApiClient is a mock of ApiClient interface.
type MockApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockApiClientMockRecorder
}

// MockApiClientMockRecorder is the mock recorder for MockApiClient.
type MockApiClientMockRecorder struct {
	mock *MockApiClient
}

// NewMockApiClient creates a new mock instance.
func NewMockApiClient(ctrl *gomock.Controller) *MockApiClient {
	mock := &MockApiClient{ctrl: ctrl}
	mock.recorder = &MockApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiClient) EXPECT() *MockApiClientMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockApiClient) GetClient(ctx context.Context, apiKey string) models.ApiClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", ctx, apiKey)
	ret0, _ := ret[0].(models.ApiClient)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockApiClientMockRecorder) GetClient(ctx, apiKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockApiClient)(nil).GetClient), ctx, apiKey)
}

// GetAllClients mocks base method.
func (m *MockApiClient) GetAllClients(ctx context.Context) []models.ApiClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllClients", ctx)
	ret0, _ := ret[0].([]models.ApiClient)
	return ret0
}

// GetAllClients indicates an expected call of GetAllClients.
func (mr *MockApiClientMockRecorder) GetAllClients(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllClients", reflect.TypeOf((*MockApiClient)(nil).GetAllClients), ctx)
}

// CreateClient mocks base method.
func (m *MockApiClient) CreateClient(ctx context.Context, client dto.ApiClient) (dto.ApiClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", ctx, client)
	ret0, _ := ret[0].(dto.ApiClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockApiClientMockRecorder) CreateClient(ctx, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockApiClient)(nil).CreateClient), ctx, client)
}

// GetSubTagClient mocks base method.
func (m *MockApiClient) GetSubTagClient(ctx context.Context, apiClient string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubTagClient", ctx, apiClient)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSubTagClient indicates an expected call of GetSubTagClient.
func (mr *MockApiClientMockRecorder) GetSubTagClient(ctx, apiClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubTagClient", reflect.TypeOf((*MockApiClient)(nil).GetSubTagClient), ctx, apiClient)
}
