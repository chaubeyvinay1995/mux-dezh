// Code generated by MockGen. DO NOT EDIT.
// Source: book-keeping.go

// Package mock_impl is a generated GoMock package.
package mock_impl

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/umi7/DezHab_user_backend/dao/models"
	reflect "reflect"
)

// MockBookKeeping is a mock of BookKeeping interface.
type MockBookKeeping struct {
	ctrl     *gomock.Controller
	recorder *MockBookKeepingMockRecorder
}

// MockBookKeepingMockRecorder is the mock recorder for MockBookKeeping.
type MockBookKeepingMockRecorder struct {
	mock *MockBookKeeping
}

// NewMockBookKeeping creates a new mock instance.
func NewMockBookKeeping(ctrl *gomock.Controller) *MockBookKeeping {
	mock := &MockBookKeeping{ctrl: ctrl}
	mock.recorder = &MockBookKeepingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookKeeping) EXPECT() *MockBookKeepingMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookKeeping) Create(ctx context.Context, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBookKeepingMockRecorder) Create(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookKeeping)(nil).Create), ctx, status)
}

// Update mocks base method.
func (m *MockBookKeeping) Update(ctx context.Context, requestId, status, failureReason, failureAction string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, requestId, status, failureReason, failureAction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBookKeepingMockRecorder) Update(ctx, requestId, status, failureReason, failureAction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookKeeping)(nil).Update), ctx, requestId, status, failureReason, failureAction)
}

// Get mocks base method.
func (m *MockBookKeeping) Get(ctx context.Context, requestId string) (models.BookKeeping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, requestId)
	ret0, _ := ret[0].(models.BookKeeping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBookKeepingMockRecorder) Get(ctx, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBookKeeping)(nil).Get), ctx, requestId)
}

// CheckBookKeepingRecord mocks base method.
func (m *MockBookKeeping) CheckBookKeepingRecord(ctx context.Context, requestId string) (models.BookKeeping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBookKeepingRecord", ctx, requestId)
	ret0, _ := ret[0].(models.BookKeeping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBookKeepingRecord indicates an expected call of CheckBookKeepingRecord.
func (mr *MockBookKeepingMockRecorder) CheckBookKeepingRecord(ctx, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBookKeepingRecord", reflect.TypeOf((*MockBookKeeping)(nil).CheckBookKeepingRecord), ctx, requestId)
}

// FetchPaginated mocks base method.
func (m *MockBookKeeping) FetchPaginated(ctx context.Context, action string, page, pageSize int, order string) ([]models.BookKeeping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPaginated", ctx, action, page, pageSize, order)
	ret0, _ := ret[0].([]models.BookKeeping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPaginated indicates an expected call of FetchPaginated.
func (mr *MockBookKeepingMockRecorder) FetchPaginated(ctx, action, page, pageSize, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPaginated", reflect.TypeOf((*MockBookKeeping)(nil).FetchPaginated), ctx, action, page, pageSize, order)
}

// Count mocks base method.
func (m *MockBookKeeping) Count(ctx context.Context, action string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, action)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockBookKeepingMockRecorder) Count(ctx, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockBookKeeping)(nil).Count), ctx, action)
}
